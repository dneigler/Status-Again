/* ****************************************************************************
*
* Copyright (c) Francesco Abbruzzese. All rights reserved.
* francesco@dotnet-programming.com
* http://www.dotnet-programming.com/
* 
* This software is subject to the the license at http://mvccontrolstoolkit.codeplex.com/license  
* and included in the license.txt file of this distribution.
* 
* You must not remove this notice, or any other, from this software.
*
* ***************************************************************************/
Array.prototype.remove = function (c, b) { var a = this.slice((b || c) + 1 || this.length); this.length = c < 0 ? this.length + c : c; return this.push.apply(this, a) }; function MvcControlsToolkit_Trim(a) { return a.replace(/^\s+|\s+$/g, "") } function GlobalEvalScriptInElementId(d) { var c = ""; if (d.tagName == "SCRIPT") { c = d.text } else { var a = $(d).find("script"); for (var b = 0; b < a.length; b++) { c += a[b].text } } jQuery.globalEval(c) } function GlobalEvalScriptAndDestroy(b) { var a = CollectScriptAndDestroy(b); jQuery.globalEval(a) } function CollectScriptAndDestroy(d) { var c = ""; if (d.tagName == "SCRIPT") { c = d.text; $(d).remove() } else { var a = $(d).find("script"); for (var b = 0; b < a.length; b++) { c += a[b].text } a.remove() } return c } function GlobalEvalScriptInElementIdById(d) { var a = $("#" + d).find("script"); var c = ""; for (var b = 0; b < a.length; b++) { c += a[b].text } jQuery.globalEval(c) } function CollectAllScriptsInelement(d) { var a = $("#" + d).find("script"); var c = ""; for (var b = 0; b < a.length; b++) { c += a[b].text } return c } (function (g) { var h = /^[\],:{}\s]*$/; var l = /\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g; var k = /"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g; var d = /(?:^|:|,)(?:\s*\[)+/g; var a = /\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(?:[.,]\d+)?Z/i; var e = /\/Date\((\d+)(?:-\d+)?\)\//i; var f = /"(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2}):(\d{2})(?:[.,](\d+))?Z"/i; var j = /"\\\/Date\((\d+)(?:-\d+)?\)\\\/"/i; var i = (window.JSON && window.JSON.parse) ? true : false; var b = i && window.JSON.parse('{"x":9}', function (n, m) { return "Y" }) === "Y"; var c = function (m, n) { if (typeof (n) === "string") { if (a.test(n)) { return new Date(n) } if (e.test(n)) { return new Date(parseInt(e.exec(n)[1], 10)) } } return n }; g.extend({ parseJSON: function (n) { var m = true; if (typeof n !== "string" || !n) { return null } n = g.trim(n); if (h.test(n.replace(l, "@").replace(k, "]").replace(d, ""))) { if (b || (i && m !== true)) { return window.JSON.parse(n, m === true ? c : undefined) } else { n = m === true ? n.replace(f, "new Date(parseInt('$1',10),parseInt('$2',10)-1,parseInt('$3',10),parseInt('$4',10),parseInt('$5',10),parseInt('$6',10),(function(s){return parseInt(s,10)||0;})('$7'))").replace(j, "new Date($1)") : n; return (new Function("return " + n))() } } else { g.error("Invalid JSON: " + n) } } }) })(jQuery); var ValidationType_StandardClient = "StandardClient"; var ValidationType_UnobtrusiveClient = "UnobtrusiveClient"; var ValidationType_Server = "Server"; function MvcControlsToolkit_Validate(g, b) { if (b == ValidationType_StandardClient) { if (typeof document.getElementById(g)[MvcControlsToolkit_FieldContext_Tag] === "undefined") { return true } var f = null; try { f = document.getElementById(g)[MvcControlsToolkit_FieldContext_Tag].validate("blur") } catch (d) { } if (f && f.length) { return false } else { return true } } else { if (b == ValidationType_UnobtrusiveClient) { var a = "#" + g; var c = true; try { c = $(a).parents("form").validate().element(a) } catch (d) { } return c } } return true } function MvcControlsToolkit_FormIsValid(d, a) { if (a == ValidationType_StandardClient) { var b = null; $("#" + d).parents("form").each(function (e) { b = this[MvcControlsToolkit_FieldContext_formValidationTag] }); if (b == null) { return true } var c = b.validate("submit"); if (c && c.length) { return false } else { return true } } else { if (a == ValidationType_UnobtrusiveClient) { return $("#" + d).parents("form").validate().form() } else { return true } } } var MvcControlsToolkit_FieldContext_hasValidationFiredTag = "__MVC_HasValidationFired"; var MvcControlsToolkit_FieldContext_formValidationTag = "__MVC_FormValidation"; var MvcControlsToolkit_FieldContext_Tag = "__MVC_FieldContext"; var MvcControlsToolkit_SpecialFormName = "_Template_Data_"; function MvcControlsToolkit_FormContext$_isElementInHierarchy(a, b) { if (b == null) { return false } while (b) { if (a === b) { return true } b = b.parentNode } return false } function MvcControlsToolkit_FieldContext$validate(a) { if (typeof Sys === "undefined" || Sys === null || typeof Sys.Mvc === "undefined" || Sys.Mvc === null || typeof Sys.Mvc.FormContext === "undefined" || Sys.Mvc.FormContext === null) { return } for (var b = 0; b < this.elements.length; b++) { if (!MvcControlsToolkit_FormContext$_isElementInHierarchy(document.body, this.elements[b])) { this.clearErrors(); return [] } } return this.baseValidate(a) } function MvcControlsToolkit_FieldContext$enableDynamicValidation() { for (var b = 0; b < this.elements.length; b++) { var a = this.elements[b]; a[MvcControlsToolkit_FieldContext_Tag] = this } this.baseEnableDynamicValidation() } if (typeof Sys !== "undefined" && Sys !== null && typeof Sys.Mvc !== "undefined" && Sys.Mvc !== null && typeof Sys.Mvc.FormContext !== "undefined" && Sys.Mvc.FormContext !== null) { Sys.Mvc.FieldContext.prototype.baseValidate = Sys.Mvc.FieldContext.prototype.validate; Sys.Mvc.FieldContext.prototype.validate = MvcControlsToolkit_FieldContext$validate; Sys.Mvc.FieldContext.prototype.baseEnableDynamicValidation = Sys.Mvc.FieldContext.prototype.enableDynamicValidation; Sys.Mvc.FieldContext.prototype.enableDynamicValidation = MvcControlsToolkit_FieldContext$enableDynamicValidation; Sys.Mvc.FieldContext.prototype._dependsOn = new Array(); Sys.Mvc.FieldContext.prototype._dependencyOnBlur = function (a) { this.validate("blur") }; Sys.Mvc.FieldContext.prototype.takeDynamicValue = function (j) { var e = null; if (this.elements.length > 0) { e = this.elements[0] } if (e == null) { return null } var b = e.name; var f = b.lastIndexOf("."); if (f >= 0) { var h = b.substring(f + 1); var c = e.id; c = c.substring(0, c.lastIndexOf(h)); j = c + j } var d = document.getElementById(j); if (d == null) { return null } var g = false; if (this._dependsOn == null) { this._dependsOn = new Array(); this._dependsOn[j] = d; g = true } else { if (typeof this._dependsOn[j] === "undefined") { this._dependsOn[j] = d; g = true } } if (g) { var a = $(e); var i = function () { if (a.attr("elementispart")) { var k = $("#" + e.id + "_hidden"); a.trigger("pfocus"); a.trigger("pblur"); k.trigger("pfocus"); k.trigger("pblur") } else { this.validate("blur") } }; Sys.UI.DomEvent.addHandler(d, "blur", Function.createDelegate(this, i)); $(d).bind("vblur", i) } return d.value }; Sys.Mvc.ValidatorRegistry.validators.dynamicrange = function (c) { var a = c.ValidationParameters.min; var b = c.ValidationParameters.max; return function (f, e) { if (!f || !f.length) { return true } var d = Number.parseLocale(f); if (!isNaN(d) && (a == null || a <= d) && (b == null || d <= b)) { return true } return c.ErrorMessage } }; Sys.Mvc.ValidatorRegistry.validators.clientdynamirange = function (d) { var c = d.ValidationParameters.min; var e = d.ValidationParameters.max; var a = d.ValidationParameters.mindelay; var b = d.ValidationParameters.maxdelay; return function (k, g) { if (!k || !k.length) { return true } var f = Number.parseLocale(k); var j = null; var l = null; if (c != null) { var h = g.fieldContext.takeDynamicValue(c); if (h != null) { j = Number.parseLocale(h); if (isNaN(j)) { j = null } else { if (a != null) { j = j + a } } } } if (e != null) { var i = g.fieldContext.takeDynamicValue(e); if (i != null) { l = Number.parseLocale(i); if (isNaN(l)) { l = null } else { if (b != null) { l = l + b } } } } if (!isNaN(f) && (j == null || j <= f) && (l == null || f <= l)) { return true } return d.ErrorMessage } }; Sys.Mvc.ValidatorRegistry.validators.globalizeddate = function (a) { return function (d, c) { if (!d || !d.length) { return true } var b = Date.parseLocale(d); if (b != null && !isNaN(b)) { return true } return a.ErrorMessage } }; Sys.Mvc.ValidatorRegistry.validators.daterange = function (rule) { var sminValue = rule.ValidationParameters.min; var smaxValue = rule.ValidationParameters.max; var minValue = null; var maxValue = null; if (sminValue != null) { sminValue = "new " + sminValue.substring(1, sminValue.length - 1); minValue = eval(sminValue) } if (smaxValue != null) { smaxValue = "new " + smaxValue.substring(1, smaxValue.length - 1); maxValue = eval(smaxValue) } return function (value, context) { if (!value || !value.length) { return true } var convertedValue = Date.parseLocale(value); if (convertedValue != null && (minValue == null || minValue <= convertedValue) && (maxValue == null || convertedValue <= maxValue)) { return true } return rule.ErrorMessage } }; Sys.Mvc.ValidatorRegistry.validators.clientdynamicdaterange = function (f) { var e = f.ValidationParameters.min; var g = f.ValidationParameters.max; var a = f.ValidationParameters.mindelay; var b = f.ValidationParameters.maxdelay; var c = null; var d = null; return function (l, i) { if (!l || !l.length) { return true } var h = Date.parseLocale(l); if (e != null) { var j = i.fieldContext.takeDynamicValue(e); if (j != null) { c = Date.parseLocale(j); if (a != null) { c = new Date(c.getTime() + a) } } } if (g != null) { var k = i.fieldContext.takeDynamicValue(g); if (k != null) { d = Date.parseLocale(k); if (b != null) { d = new Date(d.getTime() + b) } } } if (h != null && (c == null || c <= h) && (d == null || h <= d)) { return true } return f.ErrorMessage } } } if (typeof $ !== "undefined" && $ !== null && typeof $.validator !== "undefined" && $.validator !== null && typeof $.validator.unobtrusive !== "undefined" && $.validator.unobtrusive !== null) { (function (a) { a.validator.takeDynamicValue = function (f, l) { if (f == null) { return null } var c = f.name; var g = c.lastIndexOf("."); if (g >= 0) { var i = c.substring(g + 1); var d = f.id; d = d.substring(0, d.lastIndexOf(i)); l = d + l } var e = document.getElementById(l); if (e == null) { return null } var h = false; var k = jQuery.data(f, "_dependsOn"); if (typeof k == "undefined" || k == null) { k = new Array(); k[l] = e; jQuery.data(f, "_dependsOn", k); h = true } else { if (typeof k[l] === "undefined") { k[l] = e; h = true } } if (h) { var b = a(f); var j = function () { if (b.attr("elementispart")) { var m = a("#" + f.id + "_hidden"); b.trigger("pfocus"); b.trigger("pblur"); m.trigger("pfocus"); m.trigger("pblur") } else { b.parents("form").first().validate().element(f) } }; a(e).blur(j); a(e).bind("vblur", j) } return e.value }; a.validator.unobtrusive.clearAndParse = function (b) { var c = a(b).parents("form"); if (c.length != 0) { c.removeData("validator") } else { a(b).removeData("validator") } a.validator.unobtrusive.parse(b) }; a.validator.unobtrusive.parseExt = function (b) { a.validator.unobtrusive.parse(b); var e = a(b).first().closest("form"); var d = e.data("unobtrusiveValidation"); var c = e.validate(); a.each(d.options.rules, function (g, f) { if (c.settings.rules[g] == undefined) { var h = {}; a.extend(h, f); h.messages = d.options.messages[g]; a('[name= "' + g + '"]').rules("add", h) } else { a.each(f, function (k, j) { if (c.settings.rules[g][k] == undefined) { var i = {}; i[k] = j; i.messages = d.options.messages[g][k]; a('[name= "' + g + '"]').rules("add", i) } }) } }) } })($); $.validator.unobtrusive.adapters.addBool("mandatory", "required"); $.validator.addMethod("dynamicrange", function (d, b, f) { var c = f[0]; if (c == "") { c = null } var e = f[1]; if (e == "") { e = null } if ((!d || !d.length) && this.optional(b)) { return true } var a = null; if (typeof jQuery.global !== "undefined" && typeof jQuery.global.parseFloat === "function") { a = jQuery.global.parseFloat(d) } else { a = parseFloat(d) } if (!isNaN(a) && (c == null || c <= a) && (e == null || a <= e)) { return true } return false }, "value is not in the required range"); jQuery.validator.unobtrusive.adapters.add("dynamicrange", ["min", "max"], function (b) { var c = b.params.min, a = b.params.max; b.rules.dynamicrange = [c, a]; if (b.message) { b.messages.dynamicrange = b.message } }); $.validator.addMethod("clientdynamirange", function (l, h, e) { var f = e[0]; if (f == "") { f = null } var a = e[2]; if (a == "") { a = null } var g = e[1]; if (g == "") { g = null } var c = e[3]; if (c == "") { c = null } var k = null; var j = null; if (g != null) { g = parseFloat(g) } if (c != null) { c = parseFloat(c) } if ((!l || !l.length) && this.optional(h)) { return true } var b = null; if (typeof jQuery.global !== "undefined" && typeof jQuery.global.parseFloat === "function") { b = jQuery.global.parseFloat(l) } else { b = parseFloat(l) } if (f != null) { var i = $.validator.takeDynamicValue(h, f); if (i != null) { k = null; if (typeof jQuery.global !== "undefined" && typeof jQuery.global.parseFloat === "function") { k = jQuery.global.parseFloat(i) } else { k = parseFloat(i) } if (isNaN(k)) { k = null } else { if (g != null) { k = k + g } } } } if (a != null) { var d = $.validator.takeDynamicValue(h, a); if (d != null) { j = null; if (typeof jQuery.global !== "undefined" && typeof jQuery.global.parseFloat === "function") { j = jQuery.global.parseFloat(d) } else { j = parseFloat(d) } if (isNaN(j)) { j = null } else { if (c != null) { j = j + c } } } } if (!isNaN(b) && (k == null || k <= b) && (j == null || b <= j)) { return true } return false }, "value is not in the required range"); jQuery.validator.unobtrusive.adapters.add("clientdynamirange", ["min", "mindelay", "max", "maxdelay"], function (a) { var b = a.params.min, c = a.params.mindelay; max = a.params.max, maxdelay = a.params.maxdelay; a.rules.clientdynamirange = [b, c, max, maxdelay]; if (a.message) { a.messages.clientdynamirange = a.message } }); $.validator.addMethod("globalizeddate", function (c, b, d) { if ((!c || !c.length) && this.optional(b)) { return true } var a = null; if (typeof jQuery.global !== "undefined" && typeof jQuery.global.parseFloat === "function") { a = new Date(c); a = jQuery.global.parseDate(c) } else { a = new Date(c) } return !isNaN(a) && a != null }, "field must be a date/time"); $.validator.addMethod("daterange", function (d, b, f) { var c = f[0]; if (c == "") { c = null } var e = f[1]; if (e == "") { e = null } if (c != null) { c = new Date(c) } if (e != null) { e = new Date(e) } if ((!d || !d.length) && this.optional(b)) { return true } var a = null; if (typeof jQuery.global !== "undefined" && typeof jQuery.global.parseFloat === "function") { a = new Date(d); a = jQuery.global.parseDate(d) } else { a = new Date(d) } if (!isNaN(a) && (c == null || c <= a) && (e == null || a <= e)) { return true } return false }, "date is not in the required range"); jQuery.validator.unobtrusive.adapters.add("daterange", ["min", "max"], function (b) { var c = b.params.min, a = b.params.max; b.rules.daterange = [c, a]; if (b.message) { b.messages.daterange = b.message } }); $.validator.addMethod("clientdynamicdaterange", function (l, h, e) { var f = e[0]; if (f == "") { f = null } var a = e[2]; if (a == "") { a = null } var g = e[1]; if (g == "") { g = null } var c = e[3]; if (c == "") { c = null } var k = null; var j = null; if (g != null) { g = parseInt(g) } if (c != null) { c = parseInt(c) } if ((!l || !l.length) && this.optional(h)) { return true } var b = null; if (typeof jQuery.global !== "undefined" && typeof jQuery.global.parseFloat === "function") { b = jQuery.global.parseDate(l) } else { b = parseDate(l) } if (f != null) { var i = $.validator.takeDynamicValue(h, f); if (i != null) { k = null; if (typeof jQuery.global !== "undefined" && typeof jQuery.global.parseFloat === "function") { k = jQuery.global.parseDate(i) } else { k = parseDate(i) } if (isNaN(k)) { k = null } else { if (g != null) { k = new Date(k.getTime() + g) } } } } if (a != null) { var d = $.validator.takeDynamicValue(h, a); if (d != null) { j = null; if (typeof jQuery.global !== "undefined" && typeof jQuery.global.parseFloat === "function") { j = jQuery.global.parseDate(d) } else { j = parseDate(d) } if (isNaN(j)) { j = null } else { if (c != null) { j = new Date(j.getTime() + c) } } } } if (!isNaN(b) && (k == null || k <= b) && (j == null || b <= j)) { return true } return false }, "date is not in the required range"); jQuery.validator.unobtrusive.adapters.add("clientdynamicdaterange", ["min", "mindelay", "max", "maxdelay"], function (a) { var b = a.params.min, c = a.params.mindelay; max = a.params.max, maxdelay = a.params.maxdelay; a.rules.clientdynamicdaterange = [b, c, max, maxdelay]; if (a.message) { a.messages.clientdynamicdaterange = a.message } }); jQuery.validator.unobtrusive.adapters.add("globalizeddate", [], function (a) { a.rules.globalizeddate = []; if (a.message) { a.messages.globalizeddate = a.message } }) } var DualSelect_Separator = ";;;"; var DualSelect_SelectAvial = "_AvialSelect"; var DualSelect_SelectSelected = "_SelSelect"; var DualSelect_HiddenSelectedItemsVal = ""; var DualSelect_Postfix = "___PackedValue"; var DualSelect_AvailableFilter = "_AvailableFilter"; var DualSelect_SelectedFilter = "_SelectedFilter"; var DualSelect_TempObjSource, DualSelect_TempObjDestination; function MvcControlsToolkit_SubstringRating(h, a) { h = h.toLowerCase(); a = a.toLowerCase(); var c = -true; var b = 0; var f = 0; for (var e = 0; e < h.length; e++) { if (a == "") { return [f, b] } var g = h.charAt(e); var d = a.indexOf(g); if (d == -1) { continue } f++; if (c) { b += d; c = false } else { b += d * 1000 } if (d + 1 < a.length) { a = a.substr(d + 1) } else { a = "" } } return [f, b] } function DualSelect_FilterInit(b, a) { $("#" + b + (a ? DualSelect_SelectedFilter : DualSelect_AvailableFilter)).keydown(function () { var c = this; var d = MvcControlsToolkit_Trim($(c).val()); setTimeout(function () { var h = document.getElementById(b + (a ? DualSelect_SelectSelected : DualSelect_SelectAvial)); var e = MvcControlsToolkit_Trim($(c).val()); if (d == e) { return } d = e; if (e == "") { return } var g = []; for (var f = 0; f < h.length; f++) { g.push({ rating: MvcControlsToolkit_SubstringRating(e, $(h[f]).text()), item: h[f] }) } g.sort(function (j, i) { if (j.rating[0] > i.rating[0]) { return -1 } if (i.rating[0] > j.rating[0]) { return 1 } if (j.rating[1] < i.rating[1]) { return -1 } if (i.rating[1] < j.rating[1]) { return 1 } return 0 }); h.options.length = 0; for (var f = 0; f < g.length; f++) { h.options.add(g[f].item) } if (a) { DualSelect_SaveSelection(b) } }) }) } function DualSelect_SetObjects(b, a) { if (a) { DualSelect_TempObjSource = document.getElementById(b + DualSelect_SelectAvial); DualSelect_TempObjDestination = document.getElementById(b + DualSelect_SelectSelected) } else { DualSelect_TempObjSource = document.getElementById(b + DualSelect_SelectSelected); DualSelect_TempObjDestination = document.getElementById(b + DualSelect_SelectAvial) } } function DualSelect_GetIndexForInsert(b, c) { if (b.autosort == "false") { return b.length + 1 } if (b.length == 0) { return 0 } for (var a = 0; a < b.length; a++) { if (b[a].text > c.text) { return a } } return b.length } function DualSelect_MoveElement(e, c) { DualSelect_SetObjects(e, c); var a = $("#" + e.substring(0, e.lastIndexOf("___"))); if (DualSelect_TempObjSource.length == 0) { return } iLast = 0; for (var d = 0; d < DualSelect_TempObjSource.length; d++) { if (DualSelect_TempObjSource[d].selected) { iLast = d; var f = DualSelect_TempObjSource[d]; var b = new MvcControlsToolkit_changeData(f, c ? "ItemCreating" : "ItemDeleting", 0); a.trigger("itemChange", b); if (b.Cancel == true) { continue } DualSelect_TempObjSource.remove(d); nPos = (DualSelect_TempObjDestination.length + 1); DualSelect_TempObjDestination.options.add(f, DualSelect_GetIndexForInsert(DualSelect_TempObjDestination, f)); b = new MvcControlsToolkit_changeData(f, c ? "ItemCreated" : "ItemDeleted", 0); a.trigger("itemChange", b); d-- } } DualSelect_SaveSelection(e); if (DualSelect_TempObjSource.length > 0 && iLast == 0) { DualSelect_TempObjSource.selectedIndex = 0 } else { if (DualSelect_TempObjSource.length - 1 >= iLast) { DualSelect_TempObjSource.selectedIndex = iLast } else { if (DualSelect_TempObjSource.length >= 1) { DualSelect_TempObjSource.selectedIndex = iLast - 1 } } } DualSelect_ClearSelection(DualSelect_TempObjSource); DualSelect_TempObjSource.focus; a.trigger("DualSelect_Changed") } function DualSelect_Move_Up(g, c) { DualSelect_SetObjects(g, c); var a = $("#" + g.substring(0, g.lastIndexOf("___"))); if (DualSelect_TempObjSource.length == 0) { return } if (DualSelect_TempObjSource[0].selected) { return } for (var d = 1; d < DualSelect_TempObjSource.length; d++) { if (DualSelect_TempObjSource[d].selected) { var f = DualSelect_TempObjSource[d]; var b = new MvcControlsToolkit_changeData(f, "ItemMoving", 1); a.trigger("itemChange", b); if (b.Cancel == true) { continue } var e = DualSelect_TempObjSource[d - 1]; DualSelect_TempObjSource.remove(d); DualSelect_TempObjSource.remove(d - 1); DualSelect_TempObjSource.options.add(f, d - 1); DualSelect_TempObjSource.options.add(e, d); b = new MvcControlsToolkit_changeData(f, "ItemMoved", 1); a.trigger("itemChange", b); d-- } } DualSelect_SaveSelection(g); a.trigger("DualSelect_Changed") } function DualSelect_Move_Down(g, c) { DualSelect_SetObjects(g, c); var a = $("#" + g.substring(0, g.lastIndexOf("___"))); if (DualSelect_TempObjSource.length == 0) { return } if (DualSelect_TempObjSource[DualSelect_TempObjSource.length - 1].selected) { return } for (var d = DualSelect_TempObjSource.length - 2; d > -1; d--) { if (DualSelect_TempObjSource[d].selected) { var f = DualSelect_TempObjSource[d]; var b = new MvcControlsToolkit_changeData(f, "ItemMoving", -1); a.trigger("itemChange", b); if (b.Cancel == true) { continue } var e = DualSelect_TempObjSource[d + 1]; DualSelect_TempObjSource.remove(d + 1); DualSelect_TempObjSource.remove(d); DualSelect_TempObjSource.options.add(e, d); DualSelect_TempObjSource.options.add(f, d + 1); b = new MvcControlsToolkit_changeData(f, "ItemMoved", -1); a.trigger("itemChange", b); d++ } } DualSelect_SaveSelection(g); a.trigger("DualSelect_Changed") } function DualSelect_MoveAll(e, d, b) { DualSelect_SetObjects(e, d); var a = $("#" + e.substring(0, e.lastIndexOf("___"))); var f = 0; while (DualSelect_TempObjSource.length > f) { oNode = DualSelect_TempObjSource[f]; if (b != true) { var c = new MvcControlsToolkit_changeData(oNode, d ? "ItemCreating" : "ItemDeleting", 0); a.trigger("itemChange", c); if (c.Cancel == true) { f++; continue } } DualSelect_TempObjSource.remove(oNode); DualSelect_TempObjDestination.options.add(oNode, DualSelect_GetIndexForInsert(DualSelect_TempObjDestination, oNode)); if (b != true) { var c = new MvcControlsToolkit_changeData(oNode, d ? "ItemCreated" : "ItemDeleted", 0); a.trigger("itemChange", c) } } DualSelect_SaveSelection(e); if (b != true) { a.trigger("DualSelect_Changed") } } function DualSelect_ClearSelection(b) { for (var a = 0; a < b.length; a++) { b[a].selected = false } } function DualSelect_SaveSelection(d) { var b = document.getElementById(d + DualSelect_SelectSelected); var c = ""; var e = ""; for (var a = 0; a < b.length; a++) { c += b[a].value + DualSelect_Separator } document.getElementById(d + DualSelect_HiddenSelectedItemsVal).value = c } function MvcControlsToolkit_DualSelect_Set(k, a, g, f) { var c = document.getElementById(k.id + DualSelect_Postfix + DualSelect_SelectAvial); var o = document.getElementById(k.id + DualSelect_Postfix + DualSelect_SelectSelected); if (c == null || o == null) { setTimeout(function () { MvcControlsToolkit_DualSelect_Set(k, a, g, f) }, 0); return } DualSelect_MoveAll(k.id + DualSelect_Postfix, false, true); if (a instanceof Array && c.options.length > 0) { var s = new Array(); for (var m = 0, h = c.length; m < h; m++) { s.push(MvcControlsToolkit_Parse(c.options[m].value, f)); c.options[m].selected = false } for (var m = 0, b = a.length; m < b; m++) { if (f == MvcControlsToolkit_DataType_Float) { var e = 0; var q = Math.abs(a[m] - s[0]); for (var h = 1, d = s.length; h < d; h++) { if (Math.abs(s[h] - a[m]) < q) { e = h; q = Math.abs(s[h] - a[m]) } } if (e >= 0) { var p = c.options[e]; c.options.remove(e); s.remove(e); o.options.add(p) } } else { for (var h = 0, d = s.length; h < d; h++) { if (s[h] === a[m]) { var p = c.options[h]; c.options.remove(h); s.remove(h); o.options.add(p); break } } } } DualSelect_SaveSelection(k.id + DualSelect_Postfix) } } function MvcControlsToolkit_DualSelect_SetString(a, b) { MvcControlsToolkit_DualSelect_Set(a, b, null, MvcControlsToolkit_DataType_String) } function MvcControlsToolkit_DualSelect_Get(c, f) { var d = document.getElementById(c.id + DualSelect_Postfix + DualSelect_SelectSelected); if (d == null) { setTimeout(function () { MvcControlsToolkit_DualSelect_Get(c, f) }, 0); return } var e = new Array(); for (var b = 0, a = d.length; b < a; b++) { e.push(MvcControlsToolkit_Parse(d.options[b].value, f)) } return e } function MvcControlsToolkit_DualSelect_GetString(a) { return MvcControlsToolkit_DualSelect_Get(a, MvcControlsToolkit_DataType_String) } function MvcControlsToolkit_changeData(b, a, c) { this.ItemChanged = b; this.ChangeType = a; this.Data = c } MvcControlsToolkit_changeData.prototype = { ItemChanged: null, ChangeType: null, Data: null, Cancel: false }; var ManipulationButtonRemove = "ManipulationButtonRemove"; var ManipulationButtonHide = "ManipulationButtonHide"; var ManipulationButtonShow = "ManipulationButtonShow"; var ManipulationButtonResetGrid = "ManipulationButtonResetGrid"; var ManipulationButtonCustom = "ManipulationButtonCustom"; function ManipulationButton_Click(target, dataButtonType) { if (dataButtonType == ManipulationButtonCustom) { eval(target); return } if (dataButtonType == ManipulationButtonRemove) { $("#" + target).remove() } else { if (dataButtonType == ManipulationButtonHide) { $("#" + target).css("visibility", "hidden") } else { if (dataButtonType == ManipulationButtonShow) { $("#" + target).css("visibility", "visible") } else { if (dataButtonType == ManipulationButtonResetGrid) { var toUndo = eval(target + AllNormalPostfix); if (toUndo != null) { for (var i = 0; i < toUndo.length; i++) { var vChanged = toUndo[i].substring(0, toUndo[i].lastIndexOf("_")) + ChandedPostfix; var deleted = eval(toUndo[i] + DeletedPostFix); if (deleted != null && deleted == true) { DataButton_Click(toUndo[i], vChanged, DataButtonUndelete) } else { DataButton_Click(toUndo[i], vChanged, DataButtonCancel) } } } } } } } } function MvcControlsToolkit_Button_AdjustText(a, c) { var b = document.getElementById(a); var d = b.nodeName.toLowerCase(); if (d == "input") { b.value = c } else { if (d == "img") { b.setAttribute("src", c) } else { if (d == "a") { b.firstChild.nodeValue = c } } } } function PageButton_Click(d, c, e, b, a) { if (e == "") { if (!MvcControlsToolkit_FormIsValid(d, a)) { return } var f = document.getElementById(d); f.value = c; $("#" + d).parents("form").submit() } else { if (b != "") { $.ajax({ type: "GET", url: e, success: function (g) { $("#" + b).html(g) } }) } else { window.location.href = e } } } function Sort_Handler(field, buttonName, initialize, causePostback, clientOrderChanged, sortField, pageField, cssNoSort, cssAscending, cssDescending, validationType, oneColumnSorting) { if (!initialize && causePostback && !MvcControlsToolkit_FormIsValid(sortField, validationType)) { return } var order = $("#" + sortField).val(); var hasAscending = order.indexOf(" " + field + "#+;"); var hasDescending = order.indexOf(" " + field + "#-;"); var prevOrder = ""; var actualOrder = ""; if (!initialize) { if (hasDescending >= 0) { if (oneColumnSorting) { order = order.replace(" " + field + "#-;", " " + field + "#+;") } else { order = order.replace(" " + field + "#-;", "") } $("#" + sortField).val(order); $("#" + buttonName).removeClass(cssDescending); if (oneColumnSorting) { $("#" + buttonName).addClass(cssAscending) } else { $("#" + buttonName).addClass(cssNoSort) } prevOrder = "-" } else { if (hasAscending >= 0) { order = order.replace(" " + field + "#+;", " " + field + "#-;"); $("#" + sortField).val(order); $("#" + buttonName).removeClass(cssAscending); $("#" + buttonName).addClass(cssDescending); prevOrder = "+"; actualOrder = "-" } else { if (oneColumnSorting) { order = " " + field + "#+;" } else { order = order + " " + field + "#+;" } $("#" + sortField).val(order); $("#" + buttonName).removeClass(cssNoSort); $("#" + buttonName).addClass(cssAscending); actualOrder = "+"; if (oneColumnSorting) { var prevButton = eval(sortField); if (prevButton != "" && prevButton != buttonName) { $("#" + prevButton).removeClass(cssDescending).removeClass(cssAscending).addClass(cssNoSort) } eval(sortField + " = buttonName;") } } } if (pageField != null) { $("#" + pageField).val("1") } if (clientOrderChanged != null) { eval(clientOrderChanged + "('" + field + "', '" + prevOrder + "', '" + actualOrder + "')") } if (causePostback) { $("#" + sortField).parents("form").submit() } } else { if (hasDescending >= 0) { $("#" + buttonName).addClass(cssDescending); if (oneColumnSorting) { eval(sortField + " = buttonName;") } } else { if (hasAscending >= 0) { $("#" + buttonName).addClass(cssAscending); if (oneColumnSorting) { eval(sortField + " = buttonName;") } } else { $("#" + buttonName).addClass(cssNoSort) } } } } function ViewList_Client(groupName, hiddenField, cssSelected, prefix) { this.CssSelected = cssSelected; this.GroupName = groupName; this.HiddenField = hiddenField; this.Prefix = prefix; var allViews = $("." + groupName); allViews.each(function (i) { var name = this.id + "_placeholder"; var thisId = this.id; $("#" + thisId).before("<span style='display:none;' id='" + name + "'></span>"); $("." + thisId + "_checkbox").click(function () { if ($("." + thisId + "_checkbox")[0].checked) { eval(groupName + "_ViewList").Select(thisId, true) } else { eval(groupName + "_ViewList").Select("", true) } }) }); this.SelectionSet = allViews.detach(); this.SelectionSet.find("script").remove() } ViewList_Client.prototype = { HiddenField: null, GroupName: null, CssSelected: null, SelectionSet: null, Prefix: null, Select: function (b, a) { $("." + this.GroupName + "_button").removeClass(this.CssSelected); $("." + this.GroupName + "_checkbox").each(function (c) { this.checked = false }); $("." + this.GroupName).detach(); if (b == "") { document.getElementById(this.HiddenField).value = ""; return } document.getElementById(this.HiddenField).value = b; if (a == null) { b = this.Prefix + b } this.SelectionSet.filter("#" + b).insertBefore("#" + b + "_placeholder"); $("." + b + "_button").addClass(this.CssSelected); $("." + b + "_checkbox").each(function (c) { this.checked = true }) } }; function ViewsOnOff_Client_Switch(groupName, on, hidden) { if (on) { $("." + groupName + "_checkbox").each(function (i) { this.checked = true }); var toAttach = eval(groupName + "_ViewsOnOff"); toAttach.each(function (i) { var currId = this.id; $(this).insertBefore("#" + currId + "_placeholder") }); document.getElementById(hidden).value = "True" } else { $("." + groupName + "_checkbox").each(function (i) { this.checked = false }); $("." + groupName).detach(); document.getElementById(hidden).value = "False" } } function ViewsOnOff_Client_Initialize(groupName, initial_on, hidden) { var allViews = $("." + groupName); allViews.each(function (i) { var prova = this.id; if (this.id == null || this.id == "") { this.id = groupName + "_el" + i } var name = this.id + "_placeholder"; var thisId = this.id; $("#" + this.id).before("<span style='display:none;' id='" + name + "'></span>"); $("." + groupName + "_checkbox").click(function (event) { ViewsOnOff_Client_Switch(groupName, event.target.checked, hidden) }) }); var selectionSet = allViews.detach(); selectionSet.find("script").remove(); eval(groupName + "_ViewsOnOff = selectionSet;"); if (initial_on) { $("." + groupName + "_checkbox").each(function (i) { this.checked = true }); selectionSet.each(function (i) { var currId = this.id; $(this).insertBefore("#" + currId + "_placeholder") }) } else { $("." + groupName + "_checkbox").each(function (i) { this.checked = false }) } } var MvcControlsToolkit_DataType_String = 0; var MvcControlsToolkit_DataType_UInt = 1; var MvcControlsToolkit_DataType_Int = 2; var MvcControlsToolkit_DataType_Float = 3; var MvcControlsToolkit_DataType_DateTime = 4; function MvcControlsToolkit_Format(c, d, a, b, e) { if (a < 0) { return c } if (c == null) { return "" } return b + MvcControlsToolkit_ToString(c, d, a) + e } function MvcControlsToolkit_FormatDisplay(d, e, b, c, f, a) { if (b < 0) { return d } if (d == null || d === "") { return a } return c + MvcControlsToolkit_ToString(d, e, b) + f } function MvcControlsToolkit_ToString(b, c, a) { if (b === undefined) { return undefined } if (a == MvcControlsToolkit_DataType_String || a < 0) { if (b === true) { return "True" } if (b === false) { return "False" } return b } if (b == null) { return "" } if (c == "") { if (a == MvcControlsToolkit_DataType_DateTime) { c = "d" } else { if (a == MvcControlsToolkit_DataType_Int || a == MvcControlsToolkit_DataType_UInt) { c = "d" } else { if (a == MvcControlsToolkit_DataType_Float) { c = "n" } else { return b } } } } if ((typeof jQuery !== "undefined") && (typeof jQuery.global !== "undefined") && (typeof jQuery.global.parseInt === "function")) { if (a == MvcControlsToolkit_DataType_DateTime && c == "s") { c = "S" } return jQuery.global.format(b, c) } else { if ((typeof Number !== "undefined") && (typeof Number.parseLocale === "function")) { if (a == MvcControlsToolkit_DataType_DateTime && c == "S") { c = "s" } return b.localeFormat(c) } else { return b + "" } } } function MvcControlsToolkit_Parse(c, b) { if (b == MvcControlsToolkit_DataType_String) { return c } if (c === undefined) { return undefined } if (c == "") { return null } if (b == MvcControlsToolkit_DataType_Float) { if ((typeof jQuery !== "undefined") && (typeof jQuery.global !== "undefined") && (typeof jQuery.global.parseFloat == "function")) { return jQuery.global.parseFloat(c) } else { if ((typeof Number !== "undefined") && (typeof Number.parseLocale == "function")) { return Number.parseLocale(c) } else { return parseFloat(c) } } } else { if (b == MvcControlsToolkit_DataType_DateTime) { if ((typeof jQuery !== "undefined") && (typeof jQuery.global !== "undefined") && (typeof jQuery.global.parseDate == "function")) { return jQuery.global.parseDate(c) } else { if ((typeof Date !== "undefined") && (typeof Date.parseLocale == "function")) { return Date.parseLocale(c) } else { return Date.parse(c) } } } else { if ((typeof jQuery !== "undefined") && (typeof jQuery.global !== "undefined") && (typeof jQuery.parseInt == "function")) { return jQuery.global.parseInt(c) } else { if (typeof Number.parseLocale == "function") { var a = Number.parseLocale(c); if (isNaN(a)) { return a } return parseInt(a + "") } else { return parseInt(c, 10) } } } } } function MvcControlsToolkit_TypedTextBox_Input(i, d, a, f, h, e, c, b) { if (f == MvcControlsToolkit_DataType_String || f == MvcControlsToolkit_DataType_DateTime || i == 0 || i == 13 || i == 8 || i == e.charCodeAt(0) || (i >= 48 && i <= 57)) { return true } if ((f == MvcControlsToolkit_DataType_Int || f == MvcControlsToolkit_DataType_Float) && (i == c.charCodeAt(0) || i == b.charCodeAt(0))) { var g = document.getElementById(d).value; return g.indexOf(c) < 0 && g.indexOf(b) < 0 } if (f == MvcControlsToolkit_DataType_Float && i == h.charCodeAt(0)) { var g = document.getElementById(d).value; return g.indexOf(h) < 0 } return false } function MvcControlsToolkit_FocusAtEnd(a) { var b = document.getElementById(a); if (b.setSelectionRange) { b.setSelectionRange(b.value.length, b.value.length) } else { if (this.createTextRange) { r = b.createTextRange(); r.collapse(false); r.select() } } } function MvcControlsToolkit_TypedTextBox_Focus(a, c, b) { document.getElementById(a).value = document.getElementById(c).value; if (b != "") { $("#" + a).removeClass(b) } } function MvcControlsToolkit_DisplayEdit_DbClick(a, b) { $("#" + b).hide(); $("#" + a).show().focus() } function MvcControlsToolkit_TypedTextBox_Init(n, m, l, k, j, i, h, g, f, e, d, c, b, a) { $(document).ready(function () { var o = $("#" + n); o.bind("pblur", function () { MvcControlsToolkit_TypedTextBox_Blur(n, m, k, f, e, d, h, g, j, i, c, l, b); return false }); o.bind("pfocus", function () { MvcControlsToolkit_TypedTextBox_Focus(n, m, l); return false }); try { o.trigger("pfocus"); MvcControlsToolkit_TypedTextBox_Blur(n, m, k, f, e, d, h, g, j, i, c, l, b, true) } catch (p) { } o.focus(function () { o.trigger("pfocus"); MvcControlsToolkit_FocusAtEnd(n); return true }); if (a != null) { o.datepicker(a) } if (a != null) { o.datepicker() } o.blur(function () { o.trigger("pblur"); return true }); o.keypress(function (q) { return MvcControlsToolkit_TypedTextBox_Input(q.which, n, m, k, j, i, h, g) }) }) } function MvcControlsToolkit_TypedTextBox_Blur(s, z, q, n, u, v, w, b, f, l, h, j, g, m) { var a = document.getElementById(s); if (a == null) { return } var o = a.value; var p = o; if (q != MvcControlsToolkit_DataType_String && q != MvcControlsToolkit_DataType_DateTime) { o = MvcControlsToolkit_Trim(o); p = o; var d = o; d = d.replace(l, ""); tvalue = d.replace(w, ""); negative = d.indexOf(b); d = d.replace(b, ""); var y = ""; var c = ""; for (var t = 0; t < d.length; t++) { c = d.charCodeAt(t); if ((c >= 48 && c <= 57) || c == f.charCodeAt(0)) { y = y + d.charAt(t) } } d = y; if (o != "") { var k = 0; try { k = MvcControlsToolkit_Parse(d, q); if (negative >= 0) { k = k * -1 } if (!isNaN(k)) { o = MvcControlsToolkit_ToString(k, v, q); if (q == MvcControlsToolkit_DataType_Float) { if (negative >= 0) { p = b + d } else { p = d } } else { p = MvcControlsToolkit_ToString(k, "n0", q) } } } catch (x) { } } } if (q == MvcControlsToolkit_DataType_DateTime) { p = MvcControlsToolkit_ToString(MvcControlsToolkit_Parse(p, q), v, q); o = p } document.getElementById(z).value = p; if (m == null) { MvcControlsToolkit_Validate(z, g); $("#" + z).trigger("vblur") } $("#" + s).removeClass("input-validation-error"); if ($("#" + z).hasClass("input-validation-error")) { $("#" + s).addClass("input-validation-error") } if (o == "") { if (j != "") { $("#" + s).addClass(j) } document.getElementById(s).value = h } else { document.getElementById(s).value = n + o + u } $("#" + s).trigger("TypedTextBox_Changed") } function MvcControlsToolkit_DisplayEdit_Init(o, n, m, l, k, j, i, h, g, f, e, d, c, b, a) { $(document).ready(function () { var p = $("#" + o); if (b != null) { p.datepicker(b) } p.bind("pblur", function () { MvcControlsToolkit_DisplayEdit_Blur(o, n, m, h, g, f, j, i, l, k, e, c, a); return false }); try { p.trigger("pblur") } catch (q) { } p.blur(function () { p.trigger("pblur"); return true }); if (d == "click") { $("#" + n).click(function () { MvcControlsToolkit_DisplayEdit_DbClick(o, n); return true }) } else { if (d == "dblclick") { $("#" + n).dblclick(function () { MvcControlsToolkit_DisplayEdit_DbClick(o, n); return true }) } } p.keypress(function (s) { return MvcControlsToolkit_TypedTextBox_Input(s.which, o, n, m, l, k, j, i) }) }) } function MvcControlsToolkit_DisplayEdit_Blur(q, y, p, m, t, u, v, b, d, k, h, g, l) { var a = document.getElementById(q); if (a == null) { return } var n = a.value; if (l == "select") { n = $(a).find("option:selected").text() } var o = n; if (p != MvcControlsToolkit_DataType_String && p != MvcControlsToolkit_DataType_DateTime) { n = MvcControlsToolkit_Trim(n); o = n; var f = n; f = f.replace(k, ""); tvalue = f.replace(v, ""); negative = f.indexOf(b); f = f.replace(b, ""); var x = ""; var c = ""; for (var s = 0; s < f.length; s++) { c = f.charCodeAt(s); if ((c >= 48 && c <= 57) || c == d.charCodeAt(0)) { x = x + f.charAt(s) } } f = x; if (n != "") { var j = 0; try { j = MvcControlsToolkit_Parse(f, p); if (negative >= 0) { j = j * -1 } if (!isNaN(j)) { n = MvcControlsToolkit_ToString(j, u, p); if (p == MvcControlsToolkit_DataType_Float) { if (negative >= 0) { o = b + f } else { o = f } } else { o = MvcControlsToolkit_ToString(j, "n0", p) } } } catch (w) { } } } if (p == MvcControlsToolkit_DataType_DateTime) { o = MvcControlsToolkit_ToString(MvcControlsToolkit_Parse(o, p), u, p); n = o } if (l == "select") { } else { a.value = o } if (MvcControlsToolkit_Validate(q, h)) { $("#" + q).hide(); $("#" + y).show(); if (n == "") { if (g == "") { $("#" + y).html("&nbsp;&nbsp;&nbsp;") } else { $("#" + y).text(g) } } else { $("#" + y).text(m + n + t) } } $("#" + q).trigger("TypedEditDisplay_Changed") } function MvcControlsToolkit_TypedTextBox_BindChange(b, a) { $("#" + b + "_hidden").bind("TypedTextBox_Changed", a) } function MvcControlsToolkit_TypedTextBox_UnbindChange(b, a) { $("#" + b + "_hidden").unbind("TypedTextBox_Changed", a) } function MvcControlsToolkit_TypedEditDisplay_BindChange(b, a) { $("#" + b).bind("TypedEditDisplay_Changed", a) } function MvcControlsToolkit_TypedEditDisplay_UnbindChange(b, a) { $("#" + b).unbind("TypedEditDisplay_Changed", a) } function MvcControlsToolkit_TypedTextBox_SetString(b, a) { var b = $(b); b.trigger("focus"); b.val(a); b.trigger("blur") } function MvcControlsToolkit_TypedInput_Load(a, b) { var b = $(b); b.trigger("pfocus"); b.val(a); b.trigger("pblur") } function MvcControlsToolkit_TypedTextBox_GetString(a) { var b = a.id.substring(0, a.id.lastIndexOf("_")); return $("#" + b).val() } function MvcControlsToolkit_TypedTextBox_Set(c, b, f, h) { var e = $(c); var d = c.id.substring(0, c.id.lastIndexOf("_")); var g = $("#" + d); if (g.length == 0) { var a = function () { MvcControlsToolkit_TypedTextBox_Set(c, b, f, h) }; setTimeout(a, 0); return } var b = MvcControlsToolkit_Format(b, f, h, "", ""); g.val(b); e.val(b); e.trigger("pfocus"); e.trigger("pblur") } function MvcControlsToolkit_TypedTextBox_SetById(f, a, c, e) { var b = $("#" + f + "_hidden"); var d = $("#" + f); var a = MvcControlsToolkit_Format(a, c, e, "", ""); d.val(a); b.val(a); b.trigger("pfocus"); b.trigger("pblur") } function MvcControlsToolkit_TypedTextBox_Get(a, c) { var b = a.id.substring(0, a.id.lastIndexOf("_")); return MvcControlsToolkit_Parse($("#" + b).val(), c) } function MvcControlsToolkit_TypedTextBox_GetById(b, a) { return MvcControlsToolkit_Parse($("#" + b).val(), a) } function MvcControlsToolkit_TypedEditDisplay_SetString(b, a) { var b = $(b); b.val(a); b.trigger("blur") } function MvcControlsToolkit_TypedEditDisplay_GetString(a) { return $(a).val() } function MvcControlsToolkit_TypedEditDisplay_Set(b, a, d, e) { var c = $(b); $(b).val(MvcControlsToolkit_Format(a, d, e, "", "")); c.trigger("pblur") } function MvcControlsToolkit_TypedEditDisplay_SetById(e, a, c, d) { var b = $("#" + e); b.val(MvcControlsToolkit_Format(a, c, d, "", "")); b.trigger("pblur") } function MvcControlsToolkit_TypedEditDisplay_Get(a, b) { return MvcControlsToolkit_Parse($(a).val(), b) } function MvcControlsToolkit_TypedEditDisplay_GetById(b, a) { return MvcControlsToolkit_Parse($("#" + b).val(), a) } function MvcControlsToolkit_DisplayField_SetString(b, a) { return } function MvcControlsToolkit_DisplayField_GetString(field) { return eval(field.id + "_True") } function MvcControlsToolkit_AjaxLink(b, a) { $.ajax({ type: "GET", url: b, success: function (c) { $("#" + a).html(c) } }) } function MvcControlsToolkit_AjaxSubmit(a, b) { if (!MvcControlsToolkit_FormIsValid(b, a)) { return } $("#" + b).parents("form").submit() } function MvcControlsToolkit_UpdateDropDownOptions(c, f, b, a, d, e) { $.getJSON(c, function (j) { var g = []; var h = function (m, l) { var k = null; if (typeof (a) == "function") { k = a(m) } else { k = a } g.push("<option value ='" + m + "' " + (k == null ? "" : "class = '" + k + "' ") + ">" + l + "</option>") }; var i = function (l, k, n) { var o = null; if (typeof (d) == "function") { o = d(n) } else { o = d } g.push("<optgroup label ='" + l + "' " + (o == null ? "" : "class = '" + o + "' ") + ">"); for (var m = 0; m < k.length; m++) { h(k[m].Value, k[m].Text) } g.push("</optgroup>") }; if (b != null) { h("", b) } $.each(j, function (k, l) { if ("Group" in l) { if ("Value" in l) { i(l.Text, l.Group, l.Value) } else { i(l.Text, l.Group, l.Text) } } else { h(l.Value, l.Text) } }); f.html(g.join("")); if (e != null && typeof (e) == "function") { e(f) } }) };